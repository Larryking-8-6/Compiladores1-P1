
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\004\000\002\002\003\000\002\003" +
    "\011\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\003\000\002\004\003\000\002\006\012\000" +
    "\002\006\011\000\002\010\011\000\002\011\004\000\002" +
    "\011\003\000\002\012\007\000\002\012\007\000\002\012" +
    "\007\000\002\012\007\000\002\013\011\000\002\013\011" +
    "\000\002\016\004\000\002\016\003\000\002\017\007\000" +
    "\002\017\007\000\002\017\007\000\002\017\013\000\002" +
    "\017\013\000\002\021\003\000\002\021\005\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\020\003" +
    "\000\002\020\005\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\025\011\000" +
    "\002\025\012\000\002\026\012\000\002\026\013\000\002" +
    "\026\006\000\002\033\024\000\002\033\024\000\002\027" +
    "\011\000\002\030\010\000\002\030\007\000\002\030\005" +
    "\000\002\032\004\000\002\031\007\000\002\035\011\000" +
    "\002\034\013\000\002\022\011\000\002\023\007\000\002" +
    "\023\006\000\002\023\005\000\002\023\011\000\002\040" +
    "\005\000\002\041\003\000\002\041\005\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\036\005\000\002\036\005\000\002" +
    "\036\005\000\002\036\005\000\002\036\005\000\002\036" +
    "\005\000\002\036\005\000\002\036\005\000\002\036\005" +
    "\000\002\036\005\000\002\036\005\000\002\036\005\000" +
    "\002\036\005\000\002\036\004\000\002\036\005\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\042\012\000\002\043\005\000\002\044\005\000" +
    "\002\044\005\000\002\044\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    """
    \u0000\u0122\u0000\u0006\b\u0005$\b\u0001\u0002\u0000\u0004\u0002\u0000\u0001\u0002\u0000\u0004!\u011d\u0001\u0002\u0000\u0004\u0002\u011c\u0001\u0002\u0000\u0004\u0002\ufffe\u0001\u0002\u0000\u0004%\t\u0001\u0002\u0000\u0004\u0005
    \u0001\u0002\u0000\u0004\u0006\u000b\u0001\u0002\u0000\u0004\b\f\u0001\u0002\u0000,\u0005 \u000f(\u001c\u001c\u001d\u0015\u001e!\u001f+ \u001e!\u0014"\u0012$\u0016'\u0010($)%*0+-,1/\u00191\u00132\u001d6\u001a7'\u0001\u0002\u0000\u0006
    \u010b \u010c\u0001\u0002\u0000&\u0003\uffd6\u0007\uffd6 \uffd6$\uffd6'\uffd6(\uffd6)\uffd6*\uffd6+\uffd6,\uffd6/\uffd61\uffd62\uffd63\uffd64\uffd65\uffd66\uffd67\uffd6\u0001\u0002\u0000&\u0003\uffda\u0007\uffda \uffda$\uffda'\uffda(\uffda)\uffda*\uffda+\uffda,\uffda/\uffda1\uffda2\uffda3\uffda4\uffda5\uffda6\uffda7\uffda\u0001\u0002\u0000\u0006
    \uffbb \uffbb\u0001\u0002\u0000&\u0003\uffdd\u0007\uffdd \uffdd$\uffdd'\uffdd(\uffdd)\uffdd*\uffdd+\uffdd,\uffdd/\uffdd1\uffdd2\uffdd3\uffdd4\uffdd5\uffdd6\uffdd7\uffdd\u0001\u0002\u0000H\u0003\uffa3\u0004\uffa3\u0006\uffa3\u0007\uffa3\r\uffa3\u000e\uffa3\u0010\uffa3\u0011\uffa3\u0012\uffa3\u0013\uffa3\u0014\uffa3\u0015\uffa3\u0016\uffa3\u0017\uffa3\u0018\uffa3\u0019\uffa3\u001a\uffa3\u001b\uffa3 \uffa3#\uffa3$\uffa3'\uffa3(\uffa3)\uffa3*\uffa3+\uffa3,\uffa3/\uffa31\uffa32\uffa33\uffa34\uffa35\uffa36\uffa37\uffa3\u0001\u0002\u0000\u0004\u0005\u00f0\u0001\u0002\u0000H\u0003\uffa4\u0004\uffa4\u0006\uffa4\u0007\uffa4\r\uffa4\u000e\uffa4\u0010\uffa4\u0011\uffa4\u0012\uffa4\u0013\uffa4\u0014\uffa4\u0015\uffa4\u0016\uffa4\u0017\uffa4\u0018\uffa4\u0019\uffa4\u001a\uffa4\u001b\uffa4 \uffa4#\uffa4$\uffa4'\uffa4(\uffa4)\uffa4*\uffa4+\uffa4,\uffa4/\uffa41\uffa42\uffa43\uffa44\uffa45\uffa46\uffa47\uffa4\u0001\u0002\u0000H\u0003\uffa7\u0004\uffa7\u0006\uffa7\u0007\uffa7\r\uffa7\u000e\uffa7\u0010\uffa7\u0011\uffa7\u0012\uffa7\u0013\uffa7\u0014\uffa7\u0015\uffa7\u0016\uffa7\u0017\uffa7\u0018\uffa7\u0019\uffa7\u001a\uffa7\u001b\uffa7 \uffa7#\uffa7$\uffa7'\uffa7(\uffa7)\uffa7*\uffa7+\uffa7,\uffa7/\uffa71\uffa72\uffa73\uffa74\uffa75\uffa76\uffa77\uffa7\u0001\u0002\u0000
     \u0097&\u00988\u00999\u009a\u0001\u0002\u0000&\u0003\uffdb\u0007\uffdb \uffdb$\uffdb'\uffdb(\uffdb)\uffdb*\uffdb+\uffdb,\uffdb/\uffdb1\uffdb2\uffdb3\uffdb4\uffdb5\uffdb6\uffdb7\uffdb\u0001\u0002\u0000&\u0003\uffd9\u0007\uffd9 \uffd9$\uffd9'\uffd9(\uffd9)\uffd9*\uffd9+\uffd9,\uffd9/\uffd91\uffd92\uffd93\uffd94\uffd95\uffd96\uffd97\uffd9\u0001\u0002\u0000\u0004\u0005\u0084\u0001\u0002\u0000\u0004\u0005~\u0001\u0002\u0000&\u0003\uffd4\u0007\uffd4 \uffd4$\uffd4'\uffd4(\uffd4)\uffd4*\uffd4+\uffd4,\uffd4/\uffd41\uffd42\uffd43\uffd44\uffd45\uffd46\uffd47\uffd4\u0001\u0002\u0000\u0014\u0005 \u000f(\u001c\u001c\u001d\u0015\u001e!\u001f+ 6!\u0014"\u0012\u0001\u0002\u0000\u0004\u0005k\u0001\u0002\u0000B\u0003\uffa5\u0007\uffa5\u000b`\u0010\uffa5\u0011\uffa5\u0012\uffa5\u0013\uffa5\u0014\uffa5\u0015\uffa5\u0016\uffa5\u0017\uffa5\u0018\uffa5\u0019\uffa5\u001a\uffa5\u001b\uffa5 \uffa5#\uffa5$\uffa5'\uffa5(\uffa5)\uffa5*\uffa5+\uffa5,\uffa5/\uffa51\uffa52\uffa53\uffa54\uffa55\uffa56\uffa57\uffa5\u0001\u0002\u0000 \u0003_\u0007j ]$\u0016'\u0010($)%*0+-,1/\u00191\u00132\u001d6\u001a7'\u0001\u0002\u0000\u0014\u0005 \u000f(\u001c\u001c\u001d\u0015\u001e!\u001f+ 6!\u0014"\u0012\u0001\u0002\u0000H\u0003\uffa6\u0004\uffa6\u0006\uffa6\u0007\uffa6\r\uffa6\u000e\uffa6\u0010\uffa6\u0011\uffa6\u0012\uffa6\u0013\uffa6\u0014\uffa6\u0015\uffa6\u0016\uffa6\u0017\uffa6\u0018\uffa6\u0019\uffa6\u001a\uffa6\u001b\uffa6 \uffa6#\uffa6$\uffa6'\uffa6(\uffa6)\uffa6*\uffa6+\uffa6,\uffa6/\uffa61\uffa62\uffa63\uffa64\uffa65\uffa66\uffa67\uffa6\u0001\u0002\u0000&\u0003\uffd5\u0007\uffd5 \uffd5$\uffd5'\uffd5(\uffd5)\uffd5*\uffd5+\uffd5,\uffd5/\uffd51\uffd52\uffd53\uffd54\uffd55\uffd56\uffd57\uffd5\u0001\u0002\u0000@\u0003\ufffa\u0007\ufffa\u0010@\u00119\u0012<\u0013>\u0014=\u0015?\u0016C\u0017:\u00188\u0019A\u001a7\u001bD \ufffa#;$\ufffa'\ufffa(\ufffa)\ufffa*\ufffa+\ufffa,\ufffa/\ufffa1\ufffa2\ufffa3\ufffa4\ufffa5\ufffa6\ufffa7\ufffa\u0001\u0002\u0000\u0006
    \uffb9 \uffb9\u0001\u0002\u0000\u0006
    \uffb7 \uffb7\u0001\u0002\u0000&\u0003\uffd8\u0007\uffd8 \uffd8$\uffd8'\uffd8(\uffd8)\uffd8*\uffd8+\uffd8,\uffd8/\uffd81\uffd82\uffd83\uffd84\uffd85\uffd86\uffd87\uffd8\u0001\u0002\u0000\u0004\bZ\u0001\u0002\u0000\u0004\bS\u0001\u0002\u0000&\u0003\ufffb\u0007\ufffb \ufffb$\ufffb'\ufffb(\ufffb)\ufffb*\ufffb+\ufffb,\ufffb/\ufffb1\ufffb2\ufffb3\ufffb4\ufffb5\ufffb6\ufffb7\ufffb\u0001\u0002\u0000H\u0003\uffa1\u0004\uffa1\u0006\uffa1\u0007\uffa1\r\uffa1\u000e\uffa1\u0010\uffa1\u0011\uffa1\u0012\uffa1\u0013\uffa1\u0014\uffa1\u0015\uffa1\u0016\uffa1\u0017\uffa1\u0018\uffa1\u0019\uffa1\u001a\uffa1\u001b\uffa1 \uffa1#\uffa1$\uffa1'\uffa1(\uffa1)\uffa1*\uffa1+\uffa1,\uffa1/\uffa11\uffa12\uffa13\uffa14\uffa15\uffa16\uffa17\uffa1\u0001\u0002\u0000H\u0003\uffa2\u0004\uffa2\u0006\uffa2\u0007\uffa2\r\uffa2\u000e\uffa2\u0010\uffa2\u0011\uffa2\u0012\uffa2\u0013\uffa2\u0014\uffa2\u0015\uffa2\u0016\uffa2\u0017\uffa2\u0018\uffa2\u0019\uffa2\u001a\uffa2\u001b\uffa2 \uffa2#\uffa2$\uffa2'\uffa2(\uffa2)\uffa2*\uffa2+\uffa2,\uffa2/\uffa21\uffa22\uffa23\uffa24\uffa25\uffa26\uffa27\uffa2\u0001\u0002\u0000&\u0003\uffdc\u0007\uffdc \uffdc$\uffdc'\uffdc(\uffdc)\uffdc*\uffdc+\uffdc,\uffdc/\uffdc1\uffdc2\uffdc3\uffdc4\uffdc5\uffdc6\uffdc7\uffdc\u0001\u0002\u0000\u0006
    \uffb8 \uffb8\u0001\u0002\u0000&\u0003\uffd3\u0007\uffd3 \uffd3$\uffd3'\uffd3(\uffd3)\uffd3*\uffd3+\uffd3,\uffd3/\uffd31\uffd32\uffd33\uffd34\uffd35\uffd36\uffd37\uffd3\u0001\u0002\u0000&\u0003\uffd7\u0007\uffd7 \uffd7$\uffd7'\uffd7(\uffd7)\uffd7*\uffd7+\uffd7,\uffd7/\uffd71\uffd72\uffd73\uffd74\uffd75\uffd76\uffd77\uffd7\u0001\u0002\u0000\u0006
    \uffba \uffba\u0001\u0002\u0000\u0004\f2\u0001\u0002\u0000\u0004-3\u0001\u0002\u0000\u0004\u00054\u0001\u0002\u0000\u0014\u0005 \u000f(\u001c\u001c\u001d\u0015\u001e!\u001f+ 6!\u0014"\u0012\u0001\u0002\u0000\u001e\u0006B\u0010@\u00119\u0012<\u0013>\u0014=\u0015?\u0016C\u0017:\u00188\u0019A\u001a7\u001bD#;\u0001\u0002\u0000H\u0003\uffa5\u0004\uffa5\u0006\uffa5\u0007\uffa5\r\uffa5\u000e\uffa5\u0010\uffa5\u0011\uffa5\u0012\uffa5\u0013\uffa5\u0014\uffa5\u0015\uffa5\u0016\uffa5\u0017\uffa5\u0018\uffa5\u0019\uffa5\u001a\uffa5\u001b\uffa5 \uffa5#\uffa5$\uffa5'\uffa5(\uffa5)\uffa5*\uffa5+\uffa5,\uffa5/\uffa51\uffa52\uffa53\uffa54\uffa55\uffa56\uffa57\uffa5\u0001\u0002\u0000\u0014\u0005 \u000f(\u001c\u001c\u001d\u0015\u001e!\u001f+ 6!\u0014"\u0012\u0001\u0002\u0000\u0014\u0005 \u000f(\u001c\u001c\u001d\u0015\u001e!\u001f+ 6!\u0014"\u0012\u0001\u0002\u0000\u0014\u0005 \u000f(\u001c\u001c\u001d\u0015\u001e!\u001f+ 6!\u0014"\u0012\u0001\u0002\u0000\u0014\u0005 \u000f(\u001c\u001c\u001d\u0015\u001e!\u001f+ 6!\u0014"\u0012\u0001\u0002\u0000\u0014\u0005 \u000f(\u001c\u001c\u001d\u0015\u001e!\u001f+ 6!\u0014"\u0012\u0001\u0002\u0000\u0014\u0005 \u000f(\u001c\u001c\u001d\u0015\u001e!\u001f+ 6!\u0014"\u0012\u0001\u0002\u0000\u0014\u0005 \u000f(\u001c\u001c\u001d\u0015\u001e!\u001f+ 6!\u0014"\u0012\u0001\u0002\u0000\u0014\u0005 \u000f(\u001c\u001c\u001d\u0015\u001e!\u001f+ 6!\u0014"\u0012\u0001\u0002\u0000\u0014\u0005 \u000f(\u001c\u001c\u001d\u0015\u001e!\u001f+ 6!\u0014"\u0012\u0001\u0002\u0000\u0014\u0005 \u000f(\u001c\u001c\u001d\u0015\u001e!\u001f+ 6!\u0014"\u0012\u0001\u0002\u0000\u0014\u0005 \u000f(\u001c\u001c\u001d\u0015\u001e!\u001f+ 6!\u0014"\u0012\u0001\u0002\u0000\u0004\u0004G\u0001\u0002\u0000\u0014\u0005 \u000f(\u001c\u001c\u001d\u0015\u001e!\u001f+ 6!\u0014"\u0012\u0001\u0002\u0000\u0014\u0005 \u000f(\u001c\u001c\u001d\u0015\u001e!\u001f+ 6!\u0014"\u0012\u0001\u0002\u0000H\u0003\uffaa\u0004\uffaa\u0006\uffaa\u0007\uffaa\r\uffaa\u000e\uffaa\u0010\uffaa\u0011\uffaa\u0012\uffaa\u0013\uffaa\u0014\uffaa\u0015\uffaa\u0016\uffaa\u0017\uffaa\u0018\uffaa\u0019\uffaa\u001a\uffaa\u001b\uffaa \uffaa#;$\uffaa'\uffaa(\uffaa)\uffaa*\uffaa+\uffaa,\uffaa/\uffaa1\uffaa2\uffaa3\uffaa4\uffaa5\uffaa6\uffaa7\uffaa\u0001\u0002\u0000H\u0003\uffad\u0004\uffad\u0006\uffad\u0007\uffad\r\uffad\u000e\uffad\u0010\uffad\u0011\uffad\u0012\uffad\u0013\uffad\u0014\uffad\u0015\uffad\u0016\uffad\u0017\uffad\u0018\uffad\u0019\uffad\u001a7\u001bD \uffad#;$\uffad'\uffad(\uffad)\uffad*\uffad+\uffad,\uffad/\uffad1\uffad2\uffad3\uffad4\uffad5\uffad6\uffad7\uffad\u0001\u0002\u0000&\u0003\uffc3\u0007\uffc3 \uffc3$\uffc3'\uffc3(\uffc3)\uffc3*\uffc3+\uffc3,\uffc3/\uffc31\uffc32\uffc33\uffc34\uffc35\uffc36\uffc37\uffc3\u0001\u0002\u0000H\u0003\uffac\u0004\uffac\u0006\uffac\u0007\uffac\r\uffac\u000e\uffac\u0010\uffac\u0011\uffac\u0012\uffac\u0013\uffac\u0014\uffac\u0015\uffac\u0016\uffac\u0017\uffac\u0018\uffac\u0019\uffac\u001a7\u001bD \uffac#;$\uffac'\uffac(\uffac)\uffac*\uffac+\uffac,\uffac/\uffac1\uffac2\uffac3\uffac4\uffac5\uffac6\uffac7\uffac\u0001\u0002\u0000H\u0003\uffb6\u0004\uffb6\u0006\uffb6\u0007\uffb6\r\uffb6\u000e\uffb6\u0010\uffb6\u0011\uffb6\u0012<\u0013>\u0014=\u0015?\u0016C\u0017:\u00188\u0019A\u001a7\u001bD \uffb6#;$\uffb6'\uffb6(\uffb6)\uffb6*\uffb6+\uffb6,\uffb6/\uffb61\uffb62\uffb63\uffb64\uffb65\uffb66\uffb67\uffb6\u0001\u0002\u0000H\u0003\uffb1\u0004\uffb1\u0006\uffb1\u0007\uffb1\r\uffb1\u000e\uffb1\u0010\uffb1\u0011\uffb1\u0012\uffb1\u0013\uffb1\u0014\uffb1\u0015\uffb1\u0016\uffb1\u0017\uffb1\u0018\uffb1\u0019\uffb1\u001a7\u001bD \uffb1#;$\uffb1'\uffb1(\uffb1)\uffb1*\uffb1+\uffb1,\uffb1/\uffb11\uffb12\uffb13\uffb14\uffb15\uffb16\uffb17\uffb1\u0001\u0002\u0000H\u0003\uffb2\u0004\uffb2\u0006\uffb2\u0007\uffb2\r\uffb2\u000e\uffb2\u0010\uffb2\u0011\uffb2\u0012\uffb2\u0013\uffb2\u0014=\u0015?\u0016C\u0017:\u00188\u0019A\u001a7\u001bD \uffb2#;$\uffb2'\uffb2(\uffb2)\uffb2*\uffb2+\uffb2,\uffb2/\uffb21\uffb22\uffb23\uffb24\uffb25\uffb26\uffb27\uffb2\u0001\u0002\u0000H\u0003\uffb0\u0004\uffb0\u0006\uffb0\u0007\uffb0\r\uffb0\u000e\uffb0\u0010\uffb0\u0011\uffb0\u0012\uffb0\u0013\uffb0\u0014\uffb0\u0015\uffb0\u0016\uffb0\u0017\uffb0\u0018\uffb0\u0019\uffb0\u001a7\u001bD \uffb0#;$\uffb0'\uffb0(\uffb0)\uffb0*\uffb0+\uffb0,\uffb0/\uffb01\uffb02\uffb03\uffb04\uffb05\uffb06\uffb07\uffb0\u0001\u0002\u0000H\u0003\uffb5\u0004\uffb5\u0006\uffb5\u0007\uffb5\r\uffb5\u000e\uffb5\u0010\uffb5\u0011\uffb5\u0012\uffb5\u0013\uffb5\u0014=\u0015?\u0016C\u0017:\u00188\u0019A\u001a7\u001bD \uffb5#;$\uffb5'\uffb5(\uffb5)\uffb5*\uffb5+\uffb5,\uffb5/\uffb51\uffb52\uffb53\uffb54\uffb55\uffb56\uffb57\uffb5\u0001\u0002\u0000H\u0003\uffb3\u0004\uffb3\u0006\uffb3\u0007\uffb3\r\uffb3\u000e\uffb3\u0010\uffb3\u0011\uffb3\u0012\uffb3\u0013\uffb3\u0014\uffb3\u0015\uffb3\u0016\uffb3\u0017\uffb3\u0018\uffb3\u0019\uffb3\u001a\uffb3\u001b\uffb3 \uffb3#;$\uffb3'\uffb3(\uffb3)\uffb3*\uffb3+\uffb3,\uffb3/\uffb31\uffb32\uffb33\uffb34\uffb35\uffb36\uffb37\uffb3\u0001\u0002\u0000H\u0003\uffaf\u0004\uffaf\u0006\uffaf\u0007\uffaf\r\uffaf\u000e\uffaf\u0010\uffaf\u0011\uffaf\u0012\uffaf\u0013\uffaf\u0014\uffaf\u0015\uffaf\u0016\uffaf\u0017\uffaf\u0018\uffaf\u0019\uffaf\u001a7\u001bD \uffaf#;$\uffaf'\uffaf(\uffaf)\uffaf*\uffaf+\uffaf,\uffaf/\uffaf1\uffaf2\uffaf3\uffaf4\uffaf5\uffaf6\uffaf7\uffaf\u0001\u0002\u0000H\u0003\uffb4\u0004\uffb4\u0006\uffb4\u0007\uffb4\r\uffb4\u000e\uffb4\u0010\uffb4\u0011\uffb4\u0012<\u0013>\u0014=\u0015?\u0016C\u0017:\u00188\u0019A\u001a7\u001bD \uffb4#;$\uffb4'\uffb4(\uffb4)\uffb4*\uffb4+\uffb4,\uffb4/\uffb41\uffb42\uffb43\uffb44\uffb45\uffb46\uffb47\uffb4\u0001\u0002\u0000H\u0003\uffae\u0004\uffae\u0006\uffae\u0007\uffae\r\uffae\u000e\uffae\u0010\uffae\u0011\uffae\u0012\uffae\u0013\uffae\u0014\uffae\u0015\uffae\u0016\uffae\u0017\uffae\u0018\uffae\u0019\uffae\u001a7\u001bD \uffae#;$\uffae'\uffae(\uffae)\uffae*\uffae+\uffae,\uffae/\uffae1\uffae2\uffae3\uffae4\uffae5\uffae6\uffae7\uffae\u0001\u0002\u0000H\u0003\uffab\u0004\uffab\u0006\uffab\u0007\uffab\r\uffab\u000e\uffab\u0010\uffab\u0011\uffab\u0012\uffab\u0013\uffab\u0014\uffab\u0015\uffab\u0016\uffab\u0017\uffab\u0018\uffab\u0019\uffab\u001a\uffab\u001b\uffab \uffab#;$\uffab'\uffab(\uffab)\uffab*\uffab+\uffab,\uffab/\uffab1\uffab2\uffab3\uffab4\uffab5\uffab6\uffab7\uffab\u0001\u0002\u0000\u0004.T\u0001\u0002\u0000\u0004\rU\u0001\u0002\u0000\u0004!V\u0001\u0002\u0000\u0004\rW\u0001\u0002\u0000\u0004!X\u0001\u0002\u0000\u0004\u0007Y\u0001\u0002\u0000H\u0003\uffa0\u0004\uffa0\u0006\uffa0\u0007\uffa0\r\uffa0\u000e\uffa0\u0010\uffa0\u0011\uffa0\u0012\uffa0\u0013\uffa0\u0014\uffa0\u0015\uffa0\u0016\uffa0\u0017\uffa0\u0018\uffa0\u0019\uffa0\u001a\uffa0\u001b\uffa0 \uffa0#\uffa0$\uffa0'\uffa0(\uffa0)\uffa0*\uffa0+\uffa0,\uffa0/\uffa01\uffa02\uffa03\uffa04\uffa05\uffa06\uffa07\uffa0\u0001\u0002\u0000,\u0005 \u000f(\u001c\u001c\u001d\u0015\u001e!\u001f+ \u001e!\u0014"\u0012$\u0016'\u0010($)%*0+-,1/\u00191\u00132\u001d6\u001a7'\u0001\u0002\u0000 \u0003_\u0007\\ ]$\u0016'\u0010($)%*0+-,1/\u00191\u00132\u001d6\u001a7'\u0001\u0002\u0000\u00046c\u0001\u0002\u0000\u0004\u000b`\u0001\u0002\u0000&\u0003\ufffd\u0007\ufffd \ufffd$\ufffd'\ufffd(\ufffd)\ufffd*\ufffd+\ufffd,\ufffd/\ufffd1\ufffd2\ufffd3\ufffd4\ufffd5\ufffd6\ufffd7\ufffd\u0001\u0002\u0000&\u0003\ufffc\u0007\ufffc \ufffc$\ufffc'\ufffc(\ufffc)\ufffc*\ufffc+\ufffc,\ufffc/\ufffc1\ufffc2\ufffc3\ufffc4\ufffc5\ufffc6\ufffc7\ufffc\u0001\u0002\u0000\u0014\u0005 \u000f(\u001c\u001c\u001d\u0015\u001e!\u001f+ 6!\u0014"\u0012\u0001\u0002\u0000\u001e\u0004b\u0010@\u00119\u0012<\u0013>\u0014=\u0015?\u0016C\u0017:\u00188\u0019A\u001a7\u001bD#;\u0001\u0002\u0000&\u0003\uffc1\u0007\uffc1 \uffc1$\uffc1'\uffc1(\uffc1)\uffc1*\uffc1+\uffc1,\uffc1/\uffc11\uffc12\uffc13\uffc14\uffc15\uffc16\uffc17\uffc1\u0001\u0002\u0000\u0004\u0005d\u0001\u0002\u0000\u0014\u0005 \u000f(\u001c\u001c\u001d\u0015\u001e!\u001f+ 6!\u0014"\u0012\u0001\u0002\u0000\u001e\u0006f\u0010@\u00119\u0012<\u0013>\u0014=\u0015?\u0016C\u0017:\u00188\u0019A\u001a7\u001bD#;\u0001\u0002\u0000\u0004\u0004g\u0001\u0002\u0000&\u0003\uffc4\u0007\uffc4 \uffc4$\uffc4'\uffc4(\uffc4)\uffc4*\uffc4+\uffc4,\uffc4/\uffc41\uffc42\uffc43\uffc44\uffc45\uffc46\uffc47\uffc4\u0001\u0002\u0000\u001e\u0006i\u0010@\u00119\u0012<\u0013>\u0014=\u0015?\u0016C\u0017:\u00188\u0019A\u001a7\u001bD#;\u0001\u0002\u0000H\u0003\uffa8\u0004\uffa8\u0006\uffa8\u0007\uffa8\r\uffa8\u000e\uffa8\u0010\uffa8\u0011\uffa8\u0012\uffa8\u0013\uffa8\u0014\uffa8\u0015\uffa8\u0016\uffa8\u0017\uffa8\u0018\uffa8\u0019\uffa8\u001a\uffa8\u001b\uffa8 \uffa8#\uffa8$\uffa8'\uffa8(\uffa8)\uffa8*\uffa8+\uffa8,\uffa8/\uffa81\uffa82\uffa83\uffa84\uffa85\uffa86\uffa87\uffa8\u0001\u0002\u0000\u0004\u0002\uffff\u0001\u0002\u0000\u0004 l\u0001\u0002\u0000\u0004\u0006m\u0001\u0002\u0000\u0004\bn\u0001\u0002\u0000\u00063q4p\u0001\u0002\u0000\u0004\u0007|\u0001\u0002\u0000\u0004\u000ez\u0001\u0002\u0000\u0014\u0005 \u000f(\u001c\u001c\u001d\u0015\u001e!\u001f+ 6!\u0014"\u0012\u0001\u0002\u0000\u001e\u000es\u0010@\u00119\u0012<\u0013>\u0014=\u0015?\u0016C\u0017:\u00188\u0019A\u001a7\u001bD#;\u0001\u0002\u0000,\u0005 \u000f(\u001c\u001c\u001d\u0015\u001e!\u001f+ \u001e!\u0014"\u0012$\u0016'\u0010($)%*0+-,1/\u00191\u00132\u001d6\u001a7'\u0001\u0002\u0000$\u0003_ ]$\u0016'\u0010($)%*0+-,1/\u00191\u00132\u001d3q4p5v6\u001a7'\u0001\u0002\u0000\u0004\u0007\uffc9\u0001\u0002\u0000\u0004\u0004y\u0001\u0002\u0000\u00063q4p\u0001\u0002\u0000\u0004\u0007\uffca\u0001\u0002\u0000\u00063\uffc74\uffc7\u0001\u0002\u0000\u001c ]$\u0016'\u0010($)%*0+-,1/\u00191\u00132\u001d6\u001a7'\u0001\u0002\u0000\u0004\u0007\uffc8\u0001\u0002\u0000&\u0003\uffcb\u0007\uffcb \uffcb$\uffcb'\uffcb(\uffcb)\uffcb*\uffcb+\uffcb,\uffcb/\uffcb1\uffcb2\uffcb3\uffcb4\uffcb5\uffcb6\uffcb7\uffcb\u0001\u0002\u0000H\u0003\uffa9\u0004\uffa9\u0006\uffa9\u0007\uffa9\r\uffa9\u000e\uffa9\u0010@\u00119\u0012<\u0013>\u0014=\u0015?\u0016C\u0017:\u00188\u0019A\u001a7\u001bD \uffa9#;$\uffa9'\uffa9(\uffa9)\uffa9*\uffa9+\uffa9,\uffa9/\uffa91\uffa92\uffa93\uffa94\uffa95\uffa96\uffa97\uffa9\u0001\u0002\u0000\u0014\u0005 \u000f(\u001c\u001c\u001d\u0015\u001e!\u001f+ 6!\u0014"\u0012\u0001\u0002\u0000\u001e\u0006\u0080\u0010@\u00119\u0012<\u0013>\u0014=\u0015?\u0016C\u0017:\u00188\u0019A\u001a7\u001bD#;\u0001\u0002\u0000\u0004\b\u0081\u0001\u0002\u0000,\u0005 \u000f(\u001c\u001c\u001d\u0015\u001e!\u001f+ \u001e!\u0014"\u0012$\u0016'\u0010($)%*0+-,1/\u00191\u00132\u001d6\u001a7'\u0001\u0002\u0000 \u0003_\u0007\u0083 ]$\u0016'\u0010($)%*0+-,1/\u00191\u00132\u001d6\u001a7'\u0001\u0002\u0000&\u0003\uffc5\u0007\uffc5 \uffc5$\uffc5'\uffc5(\uffc5)\uffc5*\uffc5+\uffc5,\uffc5/\uffc51\uffc52\uffc53\uffc54\uffc55\uffc56\uffc57\uffc5\u0001\u0002\u0000\u0014\u0005 \u000f(\u001c\u001c\u001d\u0015\u001e!\u001f+ 6!\u0014"\u0012\u0001\u0002\u0000\u001e\u0006\u0086\u0010@\u00119\u0012<\u0013>\u0014=\u0015?\u0016C\u0017:\u00188\u0019A\u001a7\u001bD#;\u0001\u0002\u0000\u0004\b\u0087\u0001\u0002\u0000,\u0005 \u000f(\u001c\u001c\u001d\u0015\u001e!\u001f+ \u001e!\u0014"\u0012$\u0016'\u0010($)%*0+-,1/\u00191\u00132\u001d6\u001a7'\u0001\u0002\u0000 \u0003_\u0007\u0089 ]$\u0016'\u0010($)%*0+-,1/\u00191\u00132\u001d6\u001a7'\u0001\u0002\u0000(\u0003\uffd2\u0007\uffd2 \uffd2$\uffd2'\uffd2(\uffd2)\uffd2*\uffd2+\uffd2,\uffd2/\uffd20\u008a1\uffd22\uffd23\uffd24\uffd25\uffd26\uffd27\uffd2\u0001\u0002\u0000\u0006\b\u008c/\u008d\u0001\u0002\u0000&\u0003\uffd1\u0007\uffd1 \uffd1$\uffd1'\uffd1(\uffd1)\uffd1*\uffd1+\uffd1,\uffd1/\uffd11\uffd12\uffd13\uffd14\uffd15\uffd16\uffd17\uffd1\u0001\u0002\u0000,\u0005 \u000f(\u001c\u001c\u001d\u0015\u001e!\u001f+ \u001e!\u0014"\u0012$\u0016'\u0010($)%*0+-,1/\u00191\u00132\u001d6\u001a7'\u0001\u0002\u0000\u0004\u0005\u008e\u0001\u0002\u0000\u0014\u0005 \u000f(\u001c\u001c\u001d\u0015\u001e!\u001f+ 6!\u0014"\u0012\u0001\u0002\u0000\u001e\u0006\u0090\u0010@\u00119\u0012<\u0013>\u0014=\u0015?\u0016C\u0017:\u00188\u0019A\u001a7\u001bD#;\u0001\u0002\u0000\u0004\b\u0091\u0001\u0002\u0000,\u0005 \u000f(\u001c\u001c\u001d\u0015\u001e!\u001f+ \u001e!\u0014"\u0012$\u0016'\u0010($)%*0+-,1/\u00191\u00132\u001d6\u001a7'\u0001\u0002\u0000 \u0003_\u0007\u0093 ]$\u0016'\u0010($)%*0+-,1/\u00191\u00132\u001d6\u001a7'\u0001\u0002\u0000(\u0003\uffd0\u0007\uffd0 \uffd0$\uffd0'\uffd0(\uffd0)\uffd0*\uffd0+\uffd0,\uffd0/\uffd00\u008a1\uffd02\uffd03\uffd04\uffd05\uffd06\uffd07\uffd0\u0001\u0002\u0000&\u0003\uffcf\u0007\uffcf \uffcf$\uffcf'\uffcf(\uffcf)\uffcf*\uffcf+\uffcf,\uffcf/\uffcf1\uffcf2\uffcf3\uffcf4\uffcf5\uffcf6\uffcf7\uffcf\u0001\u0002\u0000 \u0003_\u0007\u0096 ]$\u0016'\u0010($)%*0+-,1/\u00191\u00132\u001d6\u001a7'\u0001\u0002\u0000&\u0003\uffce\u0007\uffce \uffce$\uffce'\uffce(\uffce)\uffce*\uffce+\uffce,\uffce/\uffce1\uffce2\uffce3\uffce4\uffce5\uffce6\uffce7\uffce\u0001\u0002\u0000\u0004\u0005\u00e6\u0001\u0002\u0000\u0004\u0005\u00d1\u0001\u0002\u0000\u0004\u0005\u00cc\u0001\u0002\u0000\u0004\u0005\u009b\u0001\u0002\u0000\u0004\u0006\u009c\u0001\u0002\u0000\u0004\b\u009d\u0001\u0002\u0000\u0006(\u00a0*\u00a1\u0001\u0002\u0000\b\u0007\uffed(\u00a0*\u00a1\u0001\u0002\u0000\u0004\u0007\u00ca\u0001\u0002\u0000
    
    \u00b0:\u00b1=\u00b3>\u00b2\u0001\u0002\u0000\u0004
    \u00a2\u0001\u0002\u0000\u0004\t\u00a3\u0001\u0002\u0000\u0004<\u00a4\u0001\u0002\u0000\u0004\u000b\u00a5\u0001\u0002\u0000\u0004\b\u00a6\u0001\u0002\u0000\b\u000f(\u001e\u00aa \u00a7\u0001\u0002\u0000\u0006\u0007\uffe3\r\uffe3\u0001\u0002\u0000\u0006\u0007\u00ac\r\u00ad\u0001\u0002\u0000\u0006\u0007\uffe7\r\uffe7\u0001\u0002\u0000\u0006\u0007\uffe5\r\uffe5\u0001\u0002\u0000\u0006\u0007\uffe4\r\uffe4\u0001\u0002\u0000\u0004\u0004\u00af\u0001\u0002\u0000\b\u000f(\u001e\u00aa \u00a7\u0001\u0002\u0000\u0006\u0007\uffe6\r\uffe6\u0001\u0002\u0000\b\u0007\uffe8(\uffe8*\uffe8\u0001\u0002\u0000\u0004\t\u00c0\u0001\u0002\u0000\u0004\u000b\u00bd\u0001\u0002\u0000\u0004\u000b\u00ba\u0001\u0002\u0000\u0004\u000b\u00b4\u0001\u0002\u0000\b\u000f( \u00b5!\u00b7\u0001\u0002\u0000\b\u0004\uffde\u0007\uffde\r\uffde\u0001\u0002\u0000\u0004\u0004\u00b9\u0001\u0002\u0000\b\u0004\uffe0\u0007\uffe0\r\uffe0\u0001\u0002\u0000\b\u0004\uffdf\u0007\uffdf\r\uffdf\u0001\u0002\u0000\b\u0007\uffeb(\uffeb*\uffeb\u0001\u0002\u0000\b\u000f( \u00b5!\u00b7\u0001\u0002\u0000\u0004\u0004\u00bc\u0001\u0002\u0000\b\u0007\uffea(\uffea*\uffea\u0001\u0002\u0000\b\u000f( \u00b5!\u00b7\u0001\u0002\u0000\u0004\u0004\u00bf\u0001\u0002\u0000\b\u0007\uffec(\uffec*\uffec\u0001\u0002\u0000\u0004;\u00c1\u0001\u0002\u0000\u0004\u000b\u00c2\u0001\u0002\u0000\u0004\b\u00c3\u0001\u0002\u0000\b\u000f( \u00b5!\u00b7\u0001\u0002\u0000\u0006\u0007\u00c6\r\u00c7\u0001\u0002\u0000\u0006\u0007\uffe2\r\uffe2\u0001\u0002\u0000\u0004\u0004\u00c9\u0001\u0002\u0000\b\u000f( \u00b5!\u00b7\u0001\u0002\u0000\u0006\u0007\uffe1\r\uffe1\u0001\u0002\u0000\b\u0007\uffe9(\uffe9*\uffe9\u0001\u0002\u0000&\u0003\uffef\u0007\uffef \uffef$\uffef'\uffef(\uffef)\uffef*\uffef+\uffef,\uffef/\uffef1\uffef2\uffef3\uffef4\uffef5\uffef6\uffef7\uffef\u0001\u0002\u0000\u0004\u0007\uffee\u0001\u0002\u0000\u0004\u0006\u00cd\u0001\u0002\u0000\u0004\b\u00ce\u0001\u0002\u0000\u0006(\u00a0*\u00a1\u0001\u0002\u0000\u0004\u0007\u00d0\u0001\u0002\u0000&\u0003\ufff0\u0007\ufff0 \ufff0$\ufff0'\ufff0(\ufff0)\ufff0*\ufff0+\ufff0,\ufff0/\ufff01\ufff02\ufff03\ufff04\ufff05\ufff06\ufff07\ufff0\u0001\u0002\u0000\u0004\u0006\u00d2\u0001\u0002\u0000\u0004\b\u00d3\u0001\u0002\u0000\u0006(\u00d6*\u00d7\u0001\u0002\u0000\u0004\u0007\u00e5\u0001\u0002\u0000\b\u0007\ufff5(\u00d6*\u00d7\u0001\u0002\u0000\u0004 \u00de\u0001\u0002\u0000\u0004 \u00d8\u0001\u0002\u0000\u0004\u000b\u00d9\u0001\u0002\u0000\u0006\u000f(\u001e\u00da\u0001\u0002\u0000\u0004\u0004\u00dd\u0001\u0002\u0000\u0004\u0004\u00dc\u0001\u0002\u0000\b\u0007\ufff1(\ufff1*\ufff1\u0001\u0002\u0000\b\u0007\ufff2(\ufff2*\ufff2\u0001\u0002\u0000\u0004\u000b\u00df\u0001\u0002\u0000\u0006\u000f(!\u00e0\u0001\u0002\u0000\u0004\u0004\u00e3\u0001\u0002\u0000\u0004\u0004\u00e2\u0001\u0002\u0000\b\u0007\ufff3(\ufff3*\ufff3\u0001\u0002\u0000\b\u0007\ufff4(\ufff4*\ufff4\u0001\u0002\u0000\u0004\u0007\ufff6\u0001\u0002\u0000&\u0003\ufff7\u0007\ufff7 \ufff7$\ufff7'\ufff7(\ufff7)\ufff7*\ufff7+\ufff7,\ufff7/\ufff71\ufff72\ufff73\ufff74\ufff75\ufff76\ufff77\ufff7\u0001\u0002\u0000\u0016\u0005 \u0006\u00e8\u000f(\u001c\u001c\u001d\u0015\u001e!\u001f+ 6!\u0014"\u0012\u0001\u0002\u0000\u001e\u0006\u00ec\u0010@\u00119\u0012<\u0013>\u0014=\u0015?\u0016C\u0017:\u00188\u0019A\u001a7\u001bD#;\u0001\u0002\u0000\u0004\b\u00e9\u0001\u0002\u0000,\u0005 \u000f(\u001c\u001c\u001d\u0015\u001e!\u001f+ \u001e!\u0014"\u0012$\u0016'\u0010($)%*0+-,1/\u00191\u00132\u001d6\u001a7'\u0001\u0002\u0000 \u0003_\u0007\u00eb ]$\u0016'\u0010($)%*0+-,1/\u00191\u00132\u001d6\u001a7'\u0001\u0002\u0000&\u0003\ufff8\u0007\ufff8 \ufff8$\ufff8'\ufff8(\ufff8)\ufff8*\ufff8+\ufff8,\ufff8/\ufff81\ufff82\ufff83\ufff84\ufff85\ufff86\ufff87\ufff8\u0001\u0002\u0000\u0004\b\u00ed\u0001\u0002\u0000,\u0005 \u000f(\u001c\u001c\u001d\u0015\u001e!\u001f+ \u001e!\u0014"\u0012$\u0016'\u0010($)%*0+-,1/\u00191\u00132\u001d6\u001a7'\u0001\u0002\u0000 \u0003_\u0007\u00ef ]$\u0016'\u0010($)%*0+-,1/\u00191\u00132\u001d6\u001a7'\u0001\u0002\u0000&\u0003\ufff9\u0007\ufff9 \ufff9$\ufff9'\ufff9(\ufff9)\ufff9*\ufff9+\ufff9,\ufff9/\ufff91\ufff92\ufff93\ufff94\ufff95\ufff96\ufff97\ufff9\u0001\u0002\u0000\f'\u0010($)%*0+-\u0001\u0002\u0000\u0004 \u00f2\u0001\u0002\u0000\u0004\u000b\u00f3\u0001\u0002\u0000\u0014\u0005 \u000f(\u001c\u001c\u001d\u0015\u001e!\u001f+ 6!\u0014"\u0012\u0001\u0002\u0000\u001e\u0004\u00f5\u0010@\u00119\u0012<\u0013>\u0014=\u0015?\u0016C\u0017:\u00188\u0019A\u001a7\u001bD#;\u0001\u0002\u0000\u0004 \u00f6\u0001\u0002\u0000\u0006\u0014\u00f8\u0018\u00f7\u0001\u0002\u0000\u0004\u001d\u0102\u0001\u0002\u0000\u0004\u001d\u00f9\u0001\u0002\u0000\u0004\u0004\u00fa\u0001\u0002\u0000\u0004 \u00fb\u0001\u0002\u0000\u0004\u0010\u00fc\u0001\u0002\u0000\u0004\u0010\u00fd\u0001\u0002\u0000\u0004\u0006\u00fe\u0001\u0002\u0000\u0004\b\u00ff\u0001\u0002\u0000,\u0005 \u000f(\u001c\u001c\u001d\u0015\u001e!\u001f+ \u001e!\u0014"\u0012$\u0016'\u0010($)%*0+-,1/\u00191\u00132\u001d6\u001a7'\u0001\u0002\u0000 \u0003_\u0007\u0101 ]$\u0016'\u0010($)%*0+-,1/\u00191\u00132\u001d6\u001a7'\u0001\u0002\u0000&\u0003\uffcd\u0007\uffcd \uffcd$\uffcd'\uffcd(\uffcd)\uffcd*\uffcd+\uffcd,\uffcd/\uffcd1\uffcd2\uffcd3\uffcd4\uffcd5\uffcd6\uffcd7\uffcd\u0001\u0002\u0000\u0004\u0004\u0103\u0001\u0002\u0000\u0004 \u0104\u0001\u0002\u0000\u0004\u0010\u0105\u0001\u0002\u0000\u0004\u0010\u0106\u0001\u0002\u0000\u0004\u0006\u0107\u0001\u0002\u0000\u0004\b\u0108\u0001\u0002\u0000,\u0005 \u000f(\u001c\u001c\u001d\u0015\u001e!\u001f+ \u001e!\u0014"\u0012$\u0016'\u0010($)%*0+-,1/\u00191\u00132\u001d6\u001a7'\u0001\u0002\u0000 \u0003_\u0007\u010a ]$\u0016'\u0010($)%*0+-,1/\u00191\u00132\u001d6\u001a7'\u0001\u0002\u0000&\u0003\uffcc\u0007\uffcc \uffcc$\uffcc'\uffcc(\uffcc)\uffcc*\uffcc+\uffcc,\uffcc/\uffcc1\uffcc2\uffcc3\uffcc4\uffcc5\uffcc6\uffcc7\uffcc\u0001\u0002\u0000\u0004\t\u0111\u0001\u0002\u0000\u0006\u0004\u010e\u000b\u010d\u0001\u0002\u0000\u0014\u0005 \u000f(\u001c\u001c\u001d\u0015\u001e!\u001f+ 6!\u0014"\u0012\u0001\u0002\u0000&\u0003\uffc0\u0007\uffc0 \uffc0$\uffc0'\uffc0(\uffc0)\uffc0*\uffc0+\uffc0,\uffc0/\uffc01\uffc02\uffc03\uffc04\uffc05\uffc06\uffc07\uffc0\u0001\u0002\u0000\u001e\u0004\u0110\u0010@\u00119\u0012<\u0013>\u0014=\u0015?\u0016C\u0017:\u00188\u0019A\u001a7\u001bD#;\u0001\u0002\u0000&\u0003\uffc2\u0007\uffc2 \uffc2$\uffc2'\uffc2(\uffc2)\uffc2*\uffc2+\uffc2,\uffc2/\uffc21\uffc22\uffc23\uffc24\uffc25\uffc26\uffc27\uffc2\u0001\u0002\u0000\u0004 \u0112\u0001\u0002\u0000\u0004\u000b\u0113\u0001\u0002\u0000\u0004\b\u0114\u0001\u0002\u0000\u0014\u0005 \u000f(\u001c\u001c\u001d\u0015\u001e!\u001f+ 6!\u0014"\u0012\u0001\u0002\u0000\u0004\u0004\u0116\u0001\u0002\u0000&\u0003\uffbf\u0007\uffbf \uffbf$\uffbf'\uffbf(\uffbf)\uffbf*\uffbf+\uffbf,\uffbf/\uffbf1\uffbf2\uffbf3\uffbf4\uffbf5\uffbf6\uffbf7\uffbf\u0001\u0002\u0000\u0006\u0007\u011a\r\u0119\u0001\u0002\u0000 \u0007\uffbd\r\uffbd\u0010@\u00119\u0012<\u0013>\u0014=\u0015?\u0016C\u0017:\u00188\u0019A\u001a7\u001bD#;\u0001\u0002\u0000\u0014\u0005 \u000f(\u001c\u001c\u001d\u0015\u001e!\u001f+ 6!\u0014"\u0012\u0001\u0002\u0000\u0004\u0004\uffbe\u0001\u0002\u0000\u0006\u0007\uffbc\r\uffbc\u0001\u0002\u0000\u0004\u0002\u0001\u0001\u0002\u0000\u0004\u000e\u0122\u0001\u0002\u0000\u0006\u0007\u0120\r\u011f\u0001\u0002\u0000\u0004!\u011d\u0001\u0002\u0000\u0004\u0002\uff9f\u0001\u0002\u0000\u0006\u0007\uff9c\r\uff9c\u0001\u0002\u0000\u0006\u001e\u0124!\u0123\u0001\u0002\u0000\u0006\u0007\uff9e\r\uff9e\u0001\u0002\u0000\u0006\u0007\uff9d\r\uff9d\u0001\u0002"""});

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0122\000\010\002\005\003\003\043\006\001\001\000" +
    "\002\001\001\000\004\044\u011d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\004\036\005\050" +
    "\006\055\010\041\013\032\022\020\023\053\024\026\025" +
    "\016\027\045\033\027\034\015\035\056\036\042\037\014" +
    "\042\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\036\174\042\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\005\135\006\055\010\041\013\032\022" +
    "\020\023\053\024\026\025\016\027\045\033\027\034\015" +
    "\035\056\037\014\001\001\000\006\036\147\042\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\036\064\042\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\036\121\042\051\001\001\000\006\036" +
    "\120\042\051\001\001\000\006\036\117\042\051\001\001" +
    "\000\006\036\116\042\051\001\001\000\006\036\115\042" +
    "\051\001\001\000\006\036\114\042\051\001\001\000\006" +
    "\036\113\042\051\001\001\000\006\036\112\042\051\001" +
    "\001\000\006\036\111\042\051\001\001\000\006\036\110" +
    "\042\051\001\001\000\006\036\107\042\051\001\001\000" +
    "\002\001\001\000\006\036\105\042\051\001\001\000\006" +
    "\036\104\042\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\004\132\005\050\006\055\010\041\013\032\022\020" +
    "\023\053\024\026\025\016\027\045\033\027\034\015\035" +
    "\056\036\042\037\014\042\051\001\001\000\034\005\135" +
    "\006\055\010\041\013\032\022\020\023\053\024\026\025" +
    "\016\027\045\033\027\034\015\035\056\037\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\036\140\042\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\036" +
    "\144\042\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\156\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\036\161\042\051\001\001\000\002" +
    "\001\001\000\042\004\163\005\050\006\055\010\041\013" +
    "\032\022\020\023\053\024\026\025\016\027\045\033\027" +
    "\034\015\035\056\036\042\037\014\042\051\001\001\000" +
    "\040\005\135\006\055\010\041\013\032\022\020\023\053" +
    "\024\026\025\016\027\045\030\164\032\166\033\027\034" +
    "\015\035\056\037\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\167\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\005\172\006\055\010\041\013\032" +
    "\022\020\023\053\024\026\025\016\027\045\033\027\034" +
    "\015\035\056\037\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\036\176\042\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\004\201" +
    "\005\050\006\055\010\041\013\032\022\020\023\053\024" +
    "\026\025\016\027\045\033\027\034\015\035\056\036\042" +
    "\037\014\042\051\001\001\000\034\005\135\006\055\010" +
    "\041\013\032\022\020\023\053\024\026\025\016\027\045" +
    "\033\027\034\015\035\056\037\014\001\001\000\002\001" +
    "\001\000\006\036\204\042\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\004\207\005\050\006\055\010" +
    "\041\013\032\022\020\023\053\024\026\025\016\027\045" +
    "\033\027\034\015\035\056\036\042\037\014\042\051\001" +
    "\001\000\034\005\135\006\055\010\041\013\032\022\020" +
    "\023\053\024\026\025\016\027\045\033\027\034\015\035" +
    "\056\037\014\001\001\000\004\026\212\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\004\224\005\050\006" +
    "\055\010\041\013\032\022\020\023\053\024\026\025\016" +
    "\027\045\033\027\034\015\035\056\036\042\037\014\042" +
    "\051\001\001\000\002\001\001\000\006\036\216\042\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\004" +
    "\221\005\050\006\055\010\041\013\032\022\020\023\053" +
    "\024\026\025\016\027\045\033\027\034\015\035\056\036" +
    "\042\037\014\042\051\001\001\000\034\005\135\006\055" +
    "\010\041\013\032\022\020\023\053\024\026\025\016\027" +
    "\045\033\027\034\015\035\056\037\014\001\001\000\004" +
    "\026\223\001\001\000\002\001\001\000\034\005\135\006" +
    "\055\010\041\013\032\022\020\023\053\024\026\025\016" +
    "\027\045\033\027\034\015\035\056\037\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\236\017\235\001\001\000\006\016\312" +
    "\017\235\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\250\021\247\042" +
    "\252\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\015\250\021\255\042\252\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\265" +
    "\042\267\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\272\042\267\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\275\042\267\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\304\020\303\042\267\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\014\304\020\307\042\267\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\316\017\235" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\323\012\324\001\001" +
    "\000\002\001\001\000\006\011\343\012\324\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\332\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\340\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\036\346\042\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\004\351\005\050\006\055" +
    "\010\041\013\032\022\020\023\053\024\026\025\016\027" +
    "\045\033\027\034\015\035\056\036\042\037\014\042\051" +
    "\001\001\000\034\005\135\006\055\010\041\013\032\022" +
    "\020\023\053\024\026\025\016\027\045\033\027\034\015" +
    "\035\056\037\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\004\355\005\050\006\055\010\041\013\032" +
    "\022\020\023\053\024\026\025\016\027\045\033\027\034" +
    "\015\035\056\036\042\037\014\042\051\001\001\000\034" +
    "\005\135\006\055\010\041\013\032\022\020\023\053\024" +
    "\026\025\016\027\045\033\027\034\015\035\056\037\014" +
    "\001\001\000\002\001\001\000\004\037\360\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\036\363\042\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\004\377\005\050" +
    "\006\055\010\041\013\032\022\020\023\053\024\026\025" +
    "\016\027\045\033\027\034\015\035\056\036\042\037\014" +
    "\042\051\001\001\000\034\005\135\006\055\010\041\013" +
    "\032\022\020\023\053\024\026\025\016\027\045\033\027" +
    "\034\015\035\056\037\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\004" +
    "\u0108\005\050\006\055\010\041\013\032\022\020\023\053" +
    "\024\026\025\016\027\045\033\027\034\015\035\056\036" +
    "\042\037\014\042\051\001\001\000\034\005\135\006\055" +
    "\010\041\013\032\022\020\023\053\024\026\025\016\027" +
    "\045\033\027\034\015\035\056\037\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\036" +
    "\u010e\042\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\u0114\001\001\000\010\036\u0117\041\u0116\042\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\036\u0117\041\u011a\042\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\u0120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //Clases, objetos, variables, lista, etc... en sintaxis java    
    //Creo una lista de tipo String llamada 'salidas', donde guardare cada uno de las salidas analizadas
    //Para el proyecto se sugiere HashMap
    public List<String> salidas = new ArrayList<String>();
    public Map<String, Double> mapaDouble = new HashMap<>();    
    public Map<String, String> mapaString = new HashMap<>();

public void mostrarIntGlobales(){
    for (Map.Entry<String, Double> entry : mapaDouble.entrySet()) {
        System.out.println("Variable global "+entry.getKey() + " vale " + entry.getValue());
        if(entry.getValue() == null){
            mapaDouble.put(entry.getKey(),0.0);
        }
    }
}

public void mostrarStringGlobales(){
    for (Map.Entry<String, String> entry : mapaString.entrySet()) {
        System.out.println("Variable global " + entry.getKey() + " vale " + entry.getValue());
        if(entry.getValue() == null){
            mapaString.put(entry.getKey(),entry.getKey());
        }
    }
}
    public String titulo = "titulo";
    public List<String> ejeX = new ArrayList<String>();
    public List<String> ejeY = new ArrayList<String>();
    public List<Double> valores = new ArrayList<>();
    public String tituloX = "tituloX";
    public String tituloY = "tituloY";

public void agregarValor(String a){
    try {   
           double decimal = Double.parseDouble(a);
           valores.add(decimal);
        }catch (Exception ex) {
            System.out.println("Error al recibir valor, se ingresara un 0");
            valores.add(0.0);
        }
}
public void agregarString(String a){
    try {   
           ejeX.add(a+"");
        }catch (Exception ex) {
            System.out.println("Error al recibir texto, se ingresara un 0");
           ejeX.add("texto");
        }
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= entradas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // entradas ::= PR_VOID PR_MAIN PARIZQ PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 String salida="def main() :{\n " + a + "\n}\nf__name__ = “__main__”: \n\tmain()";
                RESULT=salida; 
                salidas.add(salida);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entradas",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // entradas ::= archivo_json 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a; salidas.add(""+a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entradas",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a + "\n"+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencias ::= sentencias error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= a + "\n #Error: "+b+"\n "+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencias ::= sentencia 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencias ::= expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funciones ::= PR_VOID ID PARIZQ expresion PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="def "+ a +"("+b+"):{\n"+c+"\n}"; System.out.println("Debo retornar esto: def "+ a +"("+b+"):{\n"+c+"\n}");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // funciones ::= PR_VOID ID PARIZQ PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="def "+ a +"():{\n"+c+"\n}";  System.out.println("Debo retornar esto: def "+ a +"():{\n"+c+"\n}");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // funcion_globales ::= PR_VOID PR_DGLOBALES PARIZQ PARDER LLAVIZQ sentencias_globales LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="def DefinirGlobales() :{\n " + a + "\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_globales",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencias_globales ::= sentencia_global sentencias_globales 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a + "\n"+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias_globales",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencias_globales ::= sentencia_global 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias_globales",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia_global ::= PR_STRING ID IGUAL STR PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="String "+a+" = "+b+ ";";  mapaString.put(a,b); mostrarStringGlobales();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_global",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia_global ::= PR_STRING ID IGUAL referencia_json PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="String "+a+" = "+b+";"; mapaString.put(a,mapaString.get(b)); mostrarStringGlobales();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_global",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia_global ::= PR_DOUBLE ID IGUAL DECIMAL PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="Double "+a+" = "+b+";"; mapaDouble.put(a,Double.parseDouble(b)); mostrarIntGlobales();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_global",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia_global ::= PR_DOUBLE ID IGUAL referencia_json PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="Double "+a+" = "+b+";"; mapaDouble.put(a,mapaDouble.get(b)); mostrarIntGlobales();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_global",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // funcion_grafica ::= PR_VOID PR_GBARRAS PARIZQ PARDER LLAVIZQ sentencias_graficas LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="def GraficaBarras() :{\n " + a + "\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_grafica",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // funcion_grafica ::= PR_VOID PR_GPIE PARIZQ PARDER LLAVIZQ sentencias_graficas LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="def DefinirGlobales() :{\n " + a + "\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_grafica",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencias_graficas ::= sentencia_grafica sentencias_graficas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a + "\n"+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias_graficas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencias_graficas ::= sentencia_grafica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias_graficas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia_grafica ::= PR_STRING PR_TITULO IGUAL valor_string PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="String titulo = "+a+";"; titulo = a+""; System.out.println("Valor titulo: " + titulo) ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_grafica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia_grafica ::= PR_STRING PR_TITULOX IGUAL valor_string PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="String tituloX = "+a+";"; tituloX = a+"";System.out.println("Valor tituloX: " + tituloX) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_grafica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia_grafica ::= PR_STRING PR_TITULOY IGUAL valor_string PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="String tituloY = "+a+";"; tituloY = a+"";System.out.println("Valor tituloY: " + tituloY) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_grafica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia_grafica ::= PR_STRING CORIZQ CORDER PR_EJEX IGUAL LLAVIZQ elementos_string LLAVDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT="String [] ejeX = {"+a+"};";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_grafica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia_grafica ::= PR_DOUBLE CORIZQ CORDER PR_VALORES IGUAL LLAVIZQ elementos_double LLAVDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT="int [] valores = {"+a+"};";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_grafica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // elementos_double ::= valor_double 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a;  agregarValor(a+"");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos_double",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // elementos_double ::= elementos_double COMA elementos_double 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+","+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos_double",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // valor_double ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_double",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // valor_double ::= referencia_json 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=mapaDouble.get(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_double",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // valor_double ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=mapaDouble.get(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_double",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // elementos_string ::= valor_string 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; agregarString(a+"");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos_string",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // elementos_string ::= elementos_string COMA elementos_string 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+","+b+"";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos_string",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // valor_string ::= STR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_string",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // valor_string ::= referencia_json 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=mapaString.get(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_string",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // valor_string ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=mapaString.get(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_string",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencia ::= sentencia_print 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencia ::= sentencia_declaracion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencia ::= sentencia_globales 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencia ::= sentenciaIf 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentencia ::= sentenciaFor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentencia ::= sentenciaSwitch 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentencia ::= sentenciaWhile 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sentencia ::= sentenciaDoWhile 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentencia ::= funcion_globales 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentencia ::= funcion_grafica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentencia ::= funciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentenciaIf ::= PR_IF PARIZQ expresion PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="if "+ a +":{\n" + b + "\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentenciaIf ::= PR_IF PARIZQ expresion PARDER LLAVIZQ sentencias LLAVDER sentenciaElse 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT="if "+ a +":{\n" + b + "\n}"+c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sentenciaElse ::= PR_ELSE PR_IF PARIZQ expresion PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="\n elif "+ a +":{\n" + b + "\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaElse",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentenciaElse ::= PR_ELSE PR_IF PARIZQ expresion PARDER LLAVIZQ sentencias LLAVDER sentenciaElse 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT="\nelif "+ a +":{\n" + b + "\n}"+c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaElse",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sentenciaElse ::= PR_ELSE LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="else :{\n" + b + "\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaElse",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sentenciaFor ::= PR_FOR PARIZQ tipo_dato ID IGUAL expresion PTCOMA ID MENORQUE ENTERO PTCOMA ID MAS MAS PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="for "+ a +" in range(1,"+b+"):{\n"+c+"\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaFor",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sentenciaFor ::= PR_FOR PARIZQ tipo_dato ID IGUAL expresion PTCOMA ID MENOROIGUAL ENTERO PTCOMA ID MAS MAS PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="for "+ a +" in range(1,"+b+"):{\n"+c+"\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaFor",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentenciaSwitch ::= PR_SWITCH PARIZQ ID PARDER LLAVIZQ sentenciasCase LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="def switch(case, "+ a +"):{\n" + "switcher = { " + b + "\n} }"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitch",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sentenciasCase ::= PR_CASE expresion DOSPUNTOS sentencias usoBreak sentenciasCase 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= a+": " + b+ ", \n " + c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasCase",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sentenciasCase ::= PR_CASE expresion DOSPUNTOS sentencias sentenciasCase 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= a+": " + b+ ", \n " + c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasCase",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sentenciasCase ::= PR_DEFAULT DOSPUNTOS sentencia 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT="4: " + b+ ","; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasCase",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // usoBreak ::= PR_BREAK PTCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("usoBreak",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sentenciasExtra ::= ID IGUAL expresion PTCOMA sentencias 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=a+"=" + b+ ";\n"+c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasExtra",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sentenciaWhile ::= PR_WHILE PARIZQ expresion PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="while "+ a +":{\n" + b + "\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sentenciaDoWhile ::= PR_DO LLAVIZQ sentencias LLAVDER PR_WHILE PARIZQ expresion PARDER PTCOMA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT="while True:{"+ b +"if ("+a+"):{ \n break \n}"+"\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhile",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentencia_print ::= PR_CONSOLE PUNTO PR_WRITE PARIZQ expresion PARDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		    
       System.out.println("Debo retornar esto: print(" + a +");" );
       //Inserto en la lista de salidas de la expresión evaluada
       //salidas.add("print(" + a + ")");
       RESULT="print(" + a + ");";
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_print",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentencia_declaracion ::= tipo_dato ID IGUAL expresion PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=a+" "+b+" = "+c+";\n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_declaracion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sentencia_declaracion ::= ID IGUAL expresion PTCOMA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=b+" = "+c+";\n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_declaracion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sentencia_declaracion ::= tipo_dato ID PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=a+" "+b+";";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_declaracion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentencia_declaracion ::= tipo_dato CORIZQ CORDER ID IGUAL lista PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= a +" [] "+b+ " = " +c+ ";" ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_declaracion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // lista ::= LLAVIZQ elementos LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="[" +a+ "]";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // elementos ::= expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=""+a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // elementos ::= elementos COMA elementos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= ""+a + "," + b+"";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tipo_dato ::= PR_INT 
            {
              Object RESULT =null;
		RESULT="int";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // tipo_dato ::= PR_DOUBLE 
            {
              Object RESULT =null;
		RESULT="double";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // tipo_dato ::= PR_STRING 
            {
              Object RESULT =null;
		RESULT="string";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // tipo_dato ::= PR_BOOL 
            {
              Object RESULT =null;
		RESULT="bool";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // tipo_dato ::= PR_CHAR 
            {
              Object RESULT =null;
		RESULT="char";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion ::= expresion MAS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " + " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= expresion POR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " * " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= expresion MENOS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " - " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= expresion UMENOS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " - " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion ::= expresion DIVIDIDO expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " / " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion ::= expresion MAYORQUE expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " > " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion ::= expresion MENORQUE expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " < " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= expresion MAYOROIGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " >= " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion ::= expresion MENOROIGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " <= " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion ::= expresion EQUALS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " == " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion ::= expresion DISTINTO expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " != " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion ::= expresion AND expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " and " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion ::= expresion OR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " or " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion ::= NOT expresion 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = " not " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion ::= PARIZQ expresion PARDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="("+a+")";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresion ::= STR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion ::= CHAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion ::= BOOLEANO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion ::= referencia_json 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // referencia_json ::= DOLLAR LLAVIZQ PR_NEWVALOR COMA STR COMA STR LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=/*"${NewValor,"+ a + "," +*/ b /*+"}"*/ ; System.out.println("${NewValor,"+ a + "," + b+"}");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("referencia_json",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // archivo_json ::= LLAVIZQ miembro LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="{"+a+"}";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("archivo_json",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // miembro ::= STR DOSPUNTOS STR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " equals " + b;  System.out.println(a +"  vale "+ b); 
                                            mapaString.put(a,b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembro",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // miembro ::= STR DOSPUNTOS DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " equals " + b;  System.out.println(a +"  vale "+ b); 
                                          mapaDouble.put(a,Double.parseDouble(b));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembro",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // miembro ::= miembro COMA miembro 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+",\n"+b+"\n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembro",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
